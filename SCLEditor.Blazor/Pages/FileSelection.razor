@using JetBrains.Annotations
@using System.IO
<style>
  .drag-drop-zone {
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all .4s;
    min-height: 100px;
  }

  .drag-drop-input {
    position: relative;
    width: 100%;
    height: 90%;
    opacity: 0;
    cursor: pointer;
    z-index: 2;
  }

  .drag-enter { box-shadow: var(--mud-elevation-10); }

  .list {
    padding: 2em;
    min-width: 100%;
  }
</style>

<MudPaper @ondragenter="@(() => _dragEnterStyle = "drag-enter")"
           @ondragleave="@(() => _dragEnterStyle = null)"
           @ondragend="@(() => _dragEnterStyle = null)"
           Class=@("drag-drop-zone " + _dragEnterStyle)>

  <InputFile OnChange="OnInputFileChanged" multiple class="drag-drop-input"/>

  <MudIcon Icon='@Icons.Material.Filled.UploadFile'></MudIcon>
</MudPaper>


<MudTable Items="@Files.Values" Hover="true" Breakpoint="Breakpoint.Sm">
  <HeaderContent>
    <MudTh>Name</MudTh>
    <MudTh>Text</MudTh>
    <MudTh>ContentType</MudTh>
    <MudTh>LastModified</MudTh>
    <MudTh>Size</MudTh>
    <MudTh>Actions</MudTh>
  </HeaderContent>
  <RowTemplate>
    <MudTd DataLabel="Name">@context.Name</MudTd>
    <MudTd DataLabel="Text">@Truncate( context.Text, 100)</MudTd>
    <MudTd DataLabel="ContentType">@context.MimeType</MudTd>
    <MudTd DataLabel="LastModified">@context.Modified.ToLocalTime()</MudTd>
    <MudTd DataLabel="Size">@context.Size</MudTd>
    <MudTd DataLabel="Actions">
      <MudIconButton Icon='@Icons.Material.Filled.Remove' OnClick='() => Files.Remove(context.Name)'/>
      <MudIconButton Icon='@Icons.Material.Filled.Usb' OnClick='() => SetSCL(context.Name)'/>
    </MudTd>
  </RowTemplate>
</MudTable>

<MudGrid Justify="Justify.Center" Spacing="4">
  <MudItem>
    <MudButton OnClick="@Files.Clear" Disabled="@(!Files.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
  </MudItem>
</MudGrid>

@code {
  string _dragEnterStyle;

  [Parameter]
  public IDictionary<string, BrowserFile> Files { get; set; }

  [Parameter]
  public Func<string, Task> SetSCLAction { get; set; }

  async Task SetSCL(string fileName)
  {
    var file = Files[fileName];
    await SetSCLAction(file.Text);
  }

  public static string Truncate(string value, int maxLength)
  {
    if (string.IsNullOrEmpty(value))
      return value;

    if (value.Length <= maxLength)
      return value;
    else
      return value.Substring(0, maxLength) + "...";
  }

  async Task OnInputFileChanged(InputFileChangeEventArgs e)
  {
    var files = e.GetMultipleFiles();

    foreach (var browserFile in files)
    {
      using var reader = new StreamReader(browserFile.OpenReadStream());

      var text = await reader.ReadToEndAsync();
      var bf = new BrowserFile(browserFile.Name, text, browserFile.ContentType, browserFile.LastModified, browserFile.Size);
      Files[browserFile.Name] = bf;
    }
  }

}
