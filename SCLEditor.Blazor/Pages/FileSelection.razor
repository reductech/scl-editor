@using JetBrains.Annotations
@using System.IO
<style>
  .drag-drop-zone {
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all .4s;
    min-height: 400px;
  }

  .drag-drop-input {
    position: absolute;
    width: 100%;
    height: 90%;
    opacity: 0;
    cursor: pointer;
    z-index: 2;
  }

  .drag-enter { box-shadow: var(--mud-elevation-10); }

  .list {
    padding: 2em;
    min-width: 100%;
  }
</style>

<MudPaper @ondragenter="@(() => _dragEnterStyle = "drag-enter")"
           @ondragleave="@(() => _dragEnterStyle = null)"
           @ondragend="@(() => _dragEnterStyle = null)"
           Class=@("drag-drop-zone " + _dragEnterStyle)>

  <InputFile OnChange="OnInputFileChanged" multiple class="drag-drop-input"/>

  <MudIcon Icon='@Icons.Material.Filled.UploadFile'></MudIcon>
</MudPaper>

<MudList Style="padding: 2em; width: 100%;" Dense="true">
  @foreach (var file in Files)
  {
    <MudListItem @key="@file.Key">
      <MudMenu Label="@file.Key">
        <MudMenuItem OnClick='() => Files.Remove(file.Key)'>Remove</MudMenuItem>
        <MudMenuItem OnClick='() => SetSCL(file.Key)'>SetSCL</MudMenuItem>
      </MudMenu>
    </MudListItem>
  }
</MudList>

<MudGrid Justify="Justify.Center" Spacing="4">
  <MudItem>
    <MudButton OnClick="@Files.Clear" Disabled="@(!Files.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
  </MudItem>
</MudGrid>

@code {
  string _dragEnterStyle;

  [Parameter]
  public IDictionary<string, BrowserFile> Files { get; set; }

  [Parameter]
  public Func<string, Task> SetSCLAction { get; set; }

  async Task SetSCL(string fileName)
  {
    var file = Files[fileName];
    await SetSCLAction(file.Text);
  }



  async Task OnInputFileChanged(InputFileChangeEventArgs e)
  {
    var files = e.GetMultipleFiles();

    foreach (var browserFile in files)
    {
      using var reader = new StreamReader(browserFile.OpenReadStream());

      var text = await reader.ReadToEndAsync();
      var bf = new BrowserFile(browserFile.Name, text, browserFile.ContentType, browserFile.LastModified, browserFile.Size);
      Files[browserFile.Name] = bf;
    }


  }

}
