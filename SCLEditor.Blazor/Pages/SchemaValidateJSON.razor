@using Microsoft.Extensions.Logging.Abstractions
@using Reductech.EDR.Core.ExternalProcesses
@using Reductech.EDR.Core.Internal
@using System.Threading
@using CSharpFunctionalExtensions
@using System.IO.Abstractions.TestingHelpers
@using Reductech.EDR.Connectors.FileSystem
@using Reductech.EDR.Connectors.StructuredData
@using Reductech.EDR.Core.Abstractions
@using Reductech.EDR.Core.Enums
@using Reductech.EDR.Core.Steps
@using Reductech.EDR.Core.Util
@using Entity = Reductech.EDR.Core.Entity
@page "/schemavalidatejson"

<MudGrid>
  <MudItem xs='12' lg='4'>
    <MudPaper Class="ma-2" Square="true">

      <MonacoEditor Id="schema-validate-json-json-input-monaco" @ref="_jsonInputEditor"
                    OnDidBlurEditorText='UpdateOutput'
                    ConstructionOptions="JsonInputEditorConstructionOptions"/>
    </MudPaper>
  </MudItem><MudItem xs='12' lg='4'>
    <MudPaper Class="ma-2" Square="true">

      <MonacoEditor Id="schema-validate-json-schema-input-monaco" @ref="_schemaInputEditor"
                    OnDidBlurEditorText='UpdateOutput'
                    ConstructionOptions="SchemaInputEditorConstructionOptions"/>
    </MudPaper>
  </MudItem>

  <MudItem xs='12' lg='4'>
    <MudPaper Class="ma-2" Square="true">

      <MonacoEditor Id="schema-validate-json-output-monaco" @ref="_outputEditor" ConstructionOptions="OutputEditorConstructionOptions"/>
    </MudPaper>
  </MudItem>

</MudGrid>

<style>
  .monaco-editor-container { height: 500px; }
</style>

@code {
  private MonacoEditor _jsonInputEditor;
  private MonacoEditor _schemaInputEditor;
  private MonacoEditor _outputEditor;

  private StepFactoryStore _stepFactoryStore;
  private IExternalContext _externalContext;

  private readonly MockFileSystem _fileSystem = new();

  private readonly ICompression _compression = new CompressionAdapter();

  /// <inheritdoc />
  protected override void OnInitialized()
  {
    _externalContext = new ExternalContext(
      ExternalProcessRunner.Instance,
      DefaultRestClientFactory.Instance,
      ConsoleAdapter.Instance,
      (ConnectorInjection.FileSystemKey, _fileSystem),
      (ConnectorInjection.CompressionKey, _compression)
      );

    var stepFactoryStoreResult = StepFactoryStore.TryCreateFromAssemblies(
      _externalContext,
      typeof(FileRead).Assembly,
      typeof(ToCSV).Assembly
      );

    _stepFactoryStore = stepFactoryStoreResult.Value;

    base.OnInitialized();
  }

  

  public CancellationTokenSource? CancellationTokenSource { get; set; }

  private StandaloneEditorConstructionOptions JsonInputEditorConstructionOptions(MonacoEditor _)
  {
    return new() 
    { 
      AutomaticLayout = true,
      Language = "json", 
      Value = "[{\"a\": true}]",

    };
  }
  
  private StandaloneEditorConstructionOptions SchemaInputEditorConstructionOptions(MonacoEditor _)
  {
    return new() { AutomaticLayout = true, Language = "json", Value = "{}", };
  }

  private StandaloneEditorConstructionOptions OutputEditorConstructionOptions(MonacoEditor _)
  {
    return new() { AutomaticLayout = true, Language = "json", Value = "", ReadOnly = true, WordWrap = "on"};
  }

  private CancellationTokenSource? _cancellationTokenSource = null;

  private async Task UpdateOutput()
  {
    _cancellationTokenSource?.Cancel();
    _cancellationTokenSource = new CancellationTokenSource();

    var jsonText = await _jsonInputEditor.GetValue();

    _fileSystem.AddFile("input.json", jsonText);


    var schemaText = await _schemaInputEditor.GetValue();

    _fileSystem.AddFile("schema.json", schemaText);

    var state = new StateMonad(NullLogger.Instance, _stepFactoryStore, _externalContext, new Dictionary<string, object>());

    var result = await ValidateDataSCL.Run(state, _cancellationTokenSource.Token);

    if (result.IsSuccess)
    {
      await _outputEditor.SetValue("Validation Successful");
    }
    else
    {
      await _outputEditor.SetValue(result.Error.AsString);
    }
  }

  private static readonly IStep<Unit> ValidateDataSCL =

    new SetVariable<Array<Entity>>()
    {
      Value = new EDR.Core.Steps.Validate()
      {
        EntityStream = new FromJsonArray()
        {
          Stream = new FileRead()
          {
            Path = new StringConstant("input.json")
          }
        },
        Schema = new FromJson(){
          Stream = new FileRead()
          {
            Path = new StringConstant("schema.json")
          }

        },
        ErrorBehavior = new EnumConstant<ErrorBehavior>(ErrorBehavior.Fail)
      },
      Variable = new VariableName("stream")
    }

    ;

}
