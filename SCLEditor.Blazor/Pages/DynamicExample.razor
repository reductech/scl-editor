@using Reductech.EDR.Core.Internal.Parser
@using Reductech.EDR.Core.Internal.Serialization
@using OneOf
@using System.Text
@page "/example/{exampleName}"


<MudGrid>



  @foreach (var input in example.Inputs)
  {
    <MudItem xs='12' md='6' lg='4' @key='@(ExampleName + input.Name + "MudItem")'>
      <MudPaper Class="ma-2" Square="true">
        @if (input is ExampleInput.ExampleFileInput fileInput)
        {
          var options = GetOptions(fileInput);

          <MudText Typo="Typo.h6">@input.Name</MudText>

          <MonacoEditor
            Id="@(ExampleName + input.Name)"
            @key="@(ExampleName + input.Name)"
            @ref="InputEditorRef"
            OnDidBlurEditorText='UpdateOutput'
            ConstructionOptions="_ => options"/>
        }
        else if (input is ExampleInput.ExampleStringVariableInput stringVariableInput)
        {
          <MudTextField T='string'
                        Label='@stringVariableInput.Name'
                        @onchange="UpdateOutput"
                        @bind-Value='stringVariableInput.BValue.Value'/>
        }
        else if (input is ExampleInput.ExampleEnumVariableInput enumVariableInput)
        {
          <MudSelect T='string'
                     Label='@enumVariableInput.Name'
                     @onchange="UpdateOutput"
                     @bind-Value='enumVariableInput.BValue.Value'>
            @foreach (var val in enumVariableInput.PossibleValues)
            {
              <MudSelectItem Value="@(val)"/>
            }
          </MudSelect>
        }
        else if (input is ExampleInput.ExampleIntVariableInput intVariableInput)
        {
          <MudNumericField T='int'
                           Label='@intVariableInput.Name'
                           @onchange="UpdateOutput"
                           @bind-Value='intVariableInput.BValue.Value'
                           Min='@(intVariableInput.Minimum ?? 0)'
                           Max='@(intVariableInput.Maximum ?? int.MaxValue)'
                           Step='@(intVariableInput.Step ?? 1)'/>
        }

      </MudPaper>
    </MudItem>
  }


  <MudItem xs='12' md='6' lg='4'>
    <MudPaper Class="ma-2" Square="true">
      <MudText Typo="Typo.h6">Output</MudText>

      <MonacoEditor
        Id="@(ExampleName + "Output")"
        @ref="_outputEditor"
        OnDidInit='UpdateOutput'
        ConstructionOptions="_ => OutputEditorConstructionOptions"/>
    </MudPaper>
  </MudItem>

</MudGrid>


<style>
  .monaco-editor-container { height: 500px; }
</style>


@code {

  [Parameter]
  public string ExampleName { get; set; }

  private MonacoEditor _outputEditor;

  readonly List<MonacoEditor> InputControls = new();

  MonacoEditor InputEditorRef
  {
    set => InputControls.Add(value); }

  private StepFactoryStore _stepFactoryStore;

  private readonly ICompression _compression = new CompressionAdapter();

  public CancellationTokenSource? _cancellationTokenSource { get; set; }

  private ExampleData example { get; set; }

  /// <inheritdoc />
  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

    foreach (var editor in InputControls)
    {
      editor.Dispose();
    }

    InputControls.Clear();
    _outputEditor?.Dispose();
    

    var stepFactoryStoreResult = StepFactoryStore.TryCreateFromAssemblies(
      ExternalContext.Default,
      typeof(FileRead).Assembly,
      typeof(ToCSV).Assembly
      );

    _stepFactoryStore = stepFactoryStoreResult.Value;

    example = ExampleHelpers.AllExamples.Single(x => x.Url.Equals(ExampleName));
  }

  private StandaloneEditorConstructionOptions GetOptions(ExampleInput.ExampleFileInput input)
  {
    return new()
    {
      AutomaticLayout = true,
      Language = input.Language,
      RenderControlCharacters = true,
      Value = input.InitialValue,
    };
  }

  private StandaloneEditorConstructionOptions OutputEditorConstructionOptions => new()
  {
    ReadOnly = true,
    AutomaticLayout = true,
    WordWrap = example.ExampleOutput.WordWrap,
    Value = "",
    Language = example.ExampleOutput.Language
  };

  public async Task FormatAll()
  {
    foreach (var editor in InputControls)
    {
      await editor.Trigger("anyString", "editor.action.formatDocument");
    }
  }

  private async Task UpdateOutput()
  {
    _cancellationTokenSource?.Cancel();
    _cancellationTokenSource = new CancellationTokenSource();

    var fileSystem = new MockFileSystem();

    var prefixStringBuilder = new StringBuilder();

    foreach (var (input,editor) in example.Inputs.OfType<ExampleInput.ExampleFileInput>().Zip(InputControls))
    {
      var text = await editor.GetValue();
      fileSystem.AddFile(input.Name, text);
    }

    foreach (var evi in example.Inputs.OfType<ExampleInput.ExampleVariableInput>())
    {
      var prefixLine = evi.GetPrefixLine();
      prefixStringBuilder.AppendLine(prefixLine);
    }

    string scl;

    if (prefixStringBuilder.Length > 0)
    {
      if (example.Scl.StartsWith("- "))
        scl = prefixStringBuilder + example.Scl;
      else
      {
        scl = prefixStringBuilder + "- " + example.Scl;
      }
    }
    else
    {
      scl = example.Scl;
    }

    var externalContext = new ExternalContext(ExternalProcessRunner.Instance,
                                              DefaultRestClientFactory.Instance,
                                              ConsoleAdapter.Instance,
                                              (ConnectorInjection.FileSystemKey, fileSystem),
                                              (ConnectorInjection.CompressionKey, new CompressionAdapter())
      );

    var state = new StateMonad(NullLogger.Instance, _stepFactoryStore, externalContext, new Dictionary<string, object>());

    var result = await SCLParsing.TryParseStep(scl)
      .Bind(x => x.TryFreeze(SCLRunner.RootCallerMetadata, _stepFactoryStore))
      .Bind(x => x.Run<object>(state, _cancellationTokenSource.Token))
      .Map(SerializationMethods.GetString);

    if (result.IsSuccess)
    {
      await _outputEditor.SetValue(result.Value);
    }
    else
    {
      await _outputEditor.SetValue(result.Error.AsString);
    }
  }

}
